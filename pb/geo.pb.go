// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geo.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GeoInfoRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoInfoRequest) Reset()         { *m = GeoInfoRequest{} }
func (m *GeoInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GeoInfoRequest) ProtoMessage()    {}
func (*GeoInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{0}
}

func (m *GeoInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoRequest.Unmarshal(m, b)
}
func (m *GeoInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoRequest.Marshal(b, m, deterministic)
}
func (m *GeoInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoRequest.Merge(m, src)
}
func (m *GeoInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GeoInfoRequest.Size(m)
}
func (m *GeoInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoRequest proto.InternalMessageInfo

func (m *GeoInfoRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type GeoInfoReply struct {
	City                 *GeoInfoReply_CITY               `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Continent            *GeoInfoReply_CONTINENT          `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country              *GeoInfoReply_COUNTRY            `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Location             *GeoInfoReply_LOCATION           `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Postal               *GeoInfoReply_POSTAL             `protobuf:"bytes,5,opt,name=postal,proto3" json:"postal,omitempty"`
	RegisteredCountry    *GeoInfoReply_REGISTERED_COUNTRY `protobuf:"bytes,6,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	Subdivisions         []*GeoInfoReply_SUBDIVISIONS     `protobuf:"bytes,7,rep,name=subdivisions,proto3" json:"subdivisions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GeoInfoReply) Reset()         { *m = GeoInfoReply{} }
func (m *GeoInfoReply) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply) ProtoMessage()    {}
func (*GeoInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1}
}

func (m *GeoInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply.Unmarshal(m, b)
}
func (m *GeoInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply.Merge(m, src)
}
func (m *GeoInfoReply) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply.Size(m)
}
func (m *GeoInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply proto.InternalMessageInfo

func (m *GeoInfoReply) GetCity() *GeoInfoReply_CITY {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *GeoInfoReply) GetContinent() *GeoInfoReply_CONTINENT {
	if m != nil {
		return m.Continent
	}
	return nil
}

func (m *GeoInfoReply) GetCountry() *GeoInfoReply_COUNTRY {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *GeoInfoReply) GetLocation() *GeoInfoReply_LOCATION {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GeoInfoReply) GetPostal() *GeoInfoReply_POSTAL {
	if m != nil {
		return m.Postal
	}
	return nil
}

func (m *GeoInfoReply) GetRegisteredCountry() *GeoInfoReply_REGISTERED_COUNTRY {
	if m != nil {
		return m.RegisteredCountry
	}
	return nil
}

func (m *GeoInfoReply) GetSubdivisions() []*GeoInfoReply_SUBDIVISIONS {
	if m != nil {
		return m.Subdivisions
	}
	return nil
}

type GeoInfoReply_NAMES struct {
	De                   string   `protobuf:"bytes,1,opt,name=de,proto3" json:"de,omitempty"`
	En                   string   `protobuf:"bytes,2,opt,name=en,proto3" json:"en,omitempty"`
	Es                   string   `protobuf:"bytes,3,opt,name=es,proto3" json:"es,omitempty"`
	Fr                   string   `protobuf:"bytes,4,opt,name=fr,proto3" json:"fr,omitempty"`
	Ja                   string   `protobuf:"bytes,5,opt,name=ja,proto3" json:"ja,omitempty"`
	Pt                   string   `protobuf:"bytes,6,opt,name=pt,proto3" json:"pt,omitempty"`
	Ru                   string   `protobuf:"bytes,7,opt,name=ru,proto3" json:"ru,omitempty"`
	Zh                   string   `protobuf:"bytes,8,opt,name=zh,proto3" json:"zh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoInfoReply_NAMES) Reset()         { *m = GeoInfoReply_NAMES{} }
func (m *GeoInfoReply_NAMES) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_NAMES) ProtoMessage()    {}
func (*GeoInfoReply_NAMES) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 0}
}

func (m *GeoInfoReply_NAMES) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_NAMES.Unmarshal(m, b)
}
func (m *GeoInfoReply_NAMES) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_NAMES.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_NAMES) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_NAMES.Merge(m, src)
}
func (m *GeoInfoReply_NAMES) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_NAMES.Size(m)
}
func (m *GeoInfoReply_NAMES) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_NAMES.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_NAMES proto.InternalMessageInfo

func (m *GeoInfoReply_NAMES) GetDe() string {
	if m != nil {
		return m.De
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetEn() string {
	if m != nil {
		return m.En
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetEs() string {
	if m != nil {
		return m.Es
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetFr() string {
	if m != nil {
		return m.Fr
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetJa() string {
	if m != nil {
		return m.Ja
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetPt() string {
	if m != nil {
		return m.Pt
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetRu() string {
	if m != nil {
		return m.Ru
	}
	return ""
}

func (m *GeoInfoReply_NAMES) GetZh() string {
	if m != nil {
		return m.Zh
	}
	return ""
}

type GeoInfoReply_CITY struct {
	GeonameId            uint64              `protobuf:"varint,1,opt,name=geoname_id,json=geonameId,proto3" json:"geoname_id,omitempty"`
	Names                *GeoInfoReply_NAMES `protobuf:"bytes,2,opt,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GeoInfoReply_CITY) Reset()         { *m = GeoInfoReply_CITY{} }
func (m *GeoInfoReply_CITY) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_CITY) ProtoMessage()    {}
func (*GeoInfoReply_CITY) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 1}
}

func (m *GeoInfoReply_CITY) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_CITY.Unmarshal(m, b)
}
func (m *GeoInfoReply_CITY) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_CITY.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_CITY) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_CITY.Merge(m, src)
}
func (m *GeoInfoReply_CITY) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_CITY.Size(m)
}
func (m *GeoInfoReply_CITY) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_CITY.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_CITY proto.InternalMessageInfo

func (m *GeoInfoReply_CITY) GetGeonameId() uint64 {
	if m != nil {
		return m.GeonameId
	}
	return 0
}

func (m *GeoInfoReply_CITY) GetNames() *GeoInfoReply_NAMES {
	if m != nil {
		return m.Names
	}
	return nil
}

type GeoInfoReply_CONTINENT struct {
	Code                 string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	GeonameId            uint64              `protobuf:"varint,2,opt,name=geoname_id,json=geonameId,proto3" json:"geoname_id,omitempty"`
	Names                *GeoInfoReply_NAMES `protobuf:"bytes,3,opt,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GeoInfoReply_CONTINENT) Reset()         { *m = GeoInfoReply_CONTINENT{} }
func (m *GeoInfoReply_CONTINENT) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_CONTINENT) ProtoMessage()    {}
func (*GeoInfoReply_CONTINENT) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 2}
}

func (m *GeoInfoReply_CONTINENT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_CONTINENT.Unmarshal(m, b)
}
func (m *GeoInfoReply_CONTINENT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_CONTINENT.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_CONTINENT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_CONTINENT.Merge(m, src)
}
func (m *GeoInfoReply_CONTINENT) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_CONTINENT.Size(m)
}
func (m *GeoInfoReply_CONTINENT) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_CONTINENT.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_CONTINENT proto.InternalMessageInfo

func (m *GeoInfoReply_CONTINENT) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GeoInfoReply_CONTINENT) GetGeonameId() uint64 {
	if m != nil {
		return m.GeonameId
	}
	return 0
}

func (m *GeoInfoReply_CONTINENT) GetNames() *GeoInfoReply_NAMES {
	if m != nil {
		return m.Names
	}
	return nil
}

type GeoInfoReply_COUNTRY struct {
	GeonameId            uint64              `protobuf:"varint,1,opt,name=geoname_id,json=geonameId,proto3" json:"geoname_id,omitempty"`
	IsInEuropeanUnion    bool                `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode              string              `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names                *GeoInfoReply_NAMES `protobuf:"bytes,4,opt,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GeoInfoReply_COUNTRY) Reset()         { *m = GeoInfoReply_COUNTRY{} }
func (m *GeoInfoReply_COUNTRY) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_COUNTRY) ProtoMessage()    {}
func (*GeoInfoReply_COUNTRY) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 3}
}

func (m *GeoInfoReply_COUNTRY) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_COUNTRY.Unmarshal(m, b)
}
func (m *GeoInfoReply_COUNTRY) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_COUNTRY.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_COUNTRY) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_COUNTRY.Merge(m, src)
}
func (m *GeoInfoReply_COUNTRY) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_COUNTRY.Size(m)
}
func (m *GeoInfoReply_COUNTRY) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_COUNTRY.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_COUNTRY proto.InternalMessageInfo

func (m *GeoInfoReply_COUNTRY) GetGeonameId() uint64 {
	if m != nil {
		return m.GeonameId
	}
	return 0
}

func (m *GeoInfoReply_COUNTRY) GetIsInEuropeanUnion() bool {
	if m != nil {
		return m.IsInEuropeanUnion
	}
	return false
}

func (m *GeoInfoReply_COUNTRY) GetIsoCode() string {
	if m != nil {
		return m.IsoCode
	}
	return ""
}

func (m *GeoInfoReply_COUNTRY) GetNames() *GeoInfoReply_NAMES {
	if m != nil {
		return m.Names
	}
	return nil
}

type GeoInfoReply_LOCATION struct {
	AccuracyRadius       uint32   `protobuf:"varint,1,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty"`
	Latitude             float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	TimeZone             string   `protobuf:"bytes,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoInfoReply_LOCATION) Reset()         { *m = GeoInfoReply_LOCATION{} }
func (m *GeoInfoReply_LOCATION) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_LOCATION) ProtoMessage()    {}
func (*GeoInfoReply_LOCATION) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 4}
}

func (m *GeoInfoReply_LOCATION) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_LOCATION.Unmarshal(m, b)
}
func (m *GeoInfoReply_LOCATION) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_LOCATION.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_LOCATION) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_LOCATION.Merge(m, src)
}
func (m *GeoInfoReply_LOCATION) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_LOCATION.Size(m)
}
func (m *GeoInfoReply_LOCATION) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_LOCATION.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_LOCATION proto.InternalMessageInfo

func (m *GeoInfoReply_LOCATION) GetAccuracyRadius() uint32 {
	if m != nil {
		return m.AccuracyRadius
	}
	return 0
}

func (m *GeoInfoReply_LOCATION) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoInfoReply_LOCATION) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GeoInfoReply_LOCATION) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

type GeoInfoReply_POSTAL struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoInfoReply_POSTAL) Reset()         { *m = GeoInfoReply_POSTAL{} }
func (m *GeoInfoReply_POSTAL) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_POSTAL) ProtoMessage()    {}
func (*GeoInfoReply_POSTAL) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 5}
}

func (m *GeoInfoReply_POSTAL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_POSTAL.Unmarshal(m, b)
}
func (m *GeoInfoReply_POSTAL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_POSTAL.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_POSTAL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_POSTAL.Merge(m, src)
}
func (m *GeoInfoReply_POSTAL) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_POSTAL.Size(m)
}
func (m *GeoInfoReply_POSTAL) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_POSTAL.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_POSTAL proto.InternalMessageInfo

func (m *GeoInfoReply_POSTAL) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type GeoInfoReply_REGISTERED_COUNTRY struct {
	GeonameId            uint64              `protobuf:"varint,1,opt,name=geoname_id,json=geonameId,proto3" json:"geoname_id,omitempty"`
	IsInEuropeanUnion    bool                `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode              string              `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names                *GeoInfoReply_NAMES `protobuf:"bytes,4,opt,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GeoInfoReply_REGISTERED_COUNTRY) Reset()         { *m = GeoInfoReply_REGISTERED_COUNTRY{} }
func (m *GeoInfoReply_REGISTERED_COUNTRY) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_REGISTERED_COUNTRY) ProtoMessage()    {}
func (*GeoInfoReply_REGISTERED_COUNTRY) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 6}
}

func (m *GeoInfoReply_REGISTERED_COUNTRY) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY.Unmarshal(m, b)
}
func (m *GeoInfoReply_REGISTERED_COUNTRY) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_REGISTERED_COUNTRY) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY.Merge(m, src)
}
func (m *GeoInfoReply_REGISTERED_COUNTRY) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY.Size(m)
}
func (m *GeoInfoReply_REGISTERED_COUNTRY) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_REGISTERED_COUNTRY proto.InternalMessageInfo

func (m *GeoInfoReply_REGISTERED_COUNTRY) GetGeonameId() uint64 {
	if m != nil {
		return m.GeonameId
	}
	return 0
}

func (m *GeoInfoReply_REGISTERED_COUNTRY) GetIsInEuropeanUnion() bool {
	if m != nil {
		return m.IsInEuropeanUnion
	}
	return false
}

func (m *GeoInfoReply_REGISTERED_COUNTRY) GetIsoCode() string {
	if m != nil {
		return m.IsoCode
	}
	return ""
}

func (m *GeoInfoReply_REGISTERED_COUNTRY) GetNames() *GeoInfoReply_NAMES {
	if m != nil {
		return m.Names
	}
	return nil
}

type GeoInfoReply_SUBDIVISIONS struct {
	GeonameId            uint64              `protobuf:"varint,1,opt,name=geoname_id,json=geonameId,proto3" json:"geoname_id,omitempty"`
	IsoCode              string              `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names                *GeoInfoReply_NAMES `protobuf:"bytes,3,opt,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GeoInfoReply_SUBDIVISIONS) Reset()         { *m = GeoInfoReply_SUBDIVISIONS{} }
func (m *GeoInfoReply_SUBDIVISIONS) String() string { return proto.CompactTextString(m) }
func (*GeoInfoReply_SUBDIVISIONS) ProtoMessage()    {}
func (*GeoInfoReply_SUBDIVISIONS) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1, 7}
}

func (m *GeoInfoReply_SUBDIVISIONS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoInfoReply_SUBDIVISIONS.Unmarshal(m, b)
}
func (m *GeoInfoReply_SUBDIVISIONS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoInfoReply_SUBDIVISIONS.Marshal(b, m, deterministic)
}
func (m *GeoInfoReply_SUBDIVISIONS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfoReply_SUBDIVISIONS.Merge(m, src)
}
func (m *GeoInfoReply_SUBDIVISIONS) XXX_Size() int {
	return xxx_messageInfo_GeoInfoReply_SUBDIVISIONS.Size(m)
}
func (m *GeoInfoReply_SUBDIVISIONS) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfoReply_SUBDIVISIONS.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfoReply_SUBDIVISIONS proto.InternalMessageInfo

func (m *GeoInfoReply_SUBDIVISIONS) GetGeonameId() uint64 {
	if m != nil {
		return m.GeonameId
	}
	return 0
}

func (m *GeoInfoReply_SUBDIVISIONS) GetIsoCode() string {
	if m != nil {
		return m.IsoCode
	}
	return ""
}

func (m *GeoInfoReply_SUBDIVISIONS) GetNames() *GeoInfoReply_NAMES {
	if m != nil {
		return m.Names
	}
	return nil
}

func init() {
	proto.RegisterType((*GeoInfoRequest)(nil), "geo.GeoInfoRequest")
	proto.RegisterType((*GeoInfoReply)(nil), "geo.GeoInfoReply")
	proto.RegisterType((*GeoInfoReply_NAMES)(nil), "geo.GeoInfoReply.NAMES")
	proto.RegisterType((*GeoInfoReply_CITY)(nil), "geo.GeoInfoReply.CITY")
	proto.RegisterType((*GeoInfoReply_CONTINENT)(nil), "geo.GeoInfoReply.CONTINENT")
	proto.RegisterType((*GeoInfoReply_COUNTRY)(nil), "geo.GeoInfoReply.COUNTRY")
	proto.RegisterType((*GeoInfoReply_LOCATION)(nil), "geo.GeoInfoReply.LOCATION")
	proto.RegisterType((*GeoInfoReply_POSTAL)(nil), "geo.GeoInfoReply.POSTAL")
	proto.RegisterType((*GeoInfoReply_REGISTERED_COUNTRY)(nil), "geo.GeoInfoReply.REGISTERED_COUNTRY")
	proto.RegisterType((*GeoInfoReply_SUBDIVISIONS)(nil), "geo.GeoInfoReply.SUBDIVISIONS")
}

func init() { proto.RegisterFile("geo.proto", fileDescriptor_363b5540e34010f3) }

var fileDescriptor_363b5540e34010f3 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x5d, 0x4f, 0xd4, 0x40,
	0x14, 0xb5, 0xdd, 0x65, 0xb7, 0xbd, 0x20, 0x86, 0xd1, 0x68, 0x29, 0x68, 0x08, 0x31, 0x91, 0x98,
	0x88, 0x06, 0x12, 0x12, 0x1f, 0x7c, 0x80, 0x65, 0xb3, 0x69, 0x82, 0x5d, 0x33, 0x2d, 0x26, 0xf8,
	0xd2, 0x94, 0x76, 0x58, 0x86, 0x2c, 0x33, 0xb5, 0x33, 0xd5, 0x2c, 0x7f, 0xc0, 0xc4, 0xbf, 0xe1,
	0xbb, 0x7f, 0xcf, 0x57, 0x33, 0xd3, 0x0f, 0xc0, 0x42, 0xe0, 0xd1, 0xb7, 0x9e, 0x3b, 0xe7, 0xcc,
	0x3d, 0xf7, 0x63, 0x0a, 0xf6, 0x84, 0xf0, 0xcd, 0x2c, 0xe7, 0x92, 0xa3, 0xce, 0x84, 0xf0, 0xf5,
	0x35, 0x58, 0x1c, 0x11, 0xee, 0xb1, 0x13, 0x8e, 0xc9, 0xd7, 0x82, 0x08, 0x89, 0x16, 0xc1, 0xa4,
	0x99, 0x63, 0xac, 0x19, 0x1b, 0x36, 0x36, 0x69, 0xb6, 0xfe, 0x07, 0x60, 0xa1, 0xa1, 0x64, 0xd3,
	0x19, 0x7a, 0x0d, 0xdd, 0x84, 0xca, 0x99, 0xa6, 0xcc, 0x6f, 0x3d, 0xdd, 0x54, 0x37, 0x5e, 0x25,
	0x6c, 0x0e, 0xbc, 0xf0, 0x08, 0x6b, 0x0e, 0x7a, 0x0f, 0x76, 0xc2, 0x99, 0xa4, 0x8c, 0x30, 0xe9,
	0x98, 0x5a, 0xb0, 0x72, 0x83, 0x60, 0xec, 0x87, 0x9e, 0x3f, 0xf4, 0x43, 0x7c, 0xc9, 0x46, 0xdb,
	0xd0, 0x4f, 0x78, 0xc1, 0x64, 0x3e, 0x73, 0x3a, 0x5a, 0xb8, 0x7c, 0x93, 0xf0, 0xd0, 0x0f, 0xf1,
	0x11, 0xae, 0x99, 0x68, 0x07, 0xac, 0x29, 0x4f, 0x62, 0x49, 0x39, 0x73, 0xba, 0x5a, 0xe5, 0xb6,
	0x55, 0x07, 0xe3, 0xc1, 0x6e, 0xe8, 0x8d, 0x7d, 0xdc, 0x70, 0xd1, 0x3b, 0xe8, 0x65, 0x5c, 0xc8,
	0x78, 0xea, 0xcc, 0x69, 0x95, 0xd3, 0x56, 0x7d, 0x1a, 0x07, 0xe1, 0xee, 0x01, 0xae, 0x78, 0x28,
	0x00, 0x94, 0x93, 0x09, 0x15, 0x92, 0xe4, 0x24, 0x8d, 0x6a, 0xa7, 0x3d, 0xad, 0x7e, 0xd9, 0x56,
	0xe3, 0xe1, 0xc8, 0x0b, 0xc2, 0x21, 0x1e, 0xee, 0x47, 0xb5, 0xe9, 0xa5, 0x4b, 0xfd, 0xa0, 0xb2,
	0xbf, 0x07, 0x0b, 0xa2, 0x38, 0x4e, 0xe9, 0x37, 0x2a, 0x28, 0x67, 0xc2, 0xe9, 0xaf, 0x75, 0x36,
	0xe6, 0xb7, 0x5e, 0xb4, 0xaf, 0x0b, 0x0e, 0xf7, 0xf6, 0xbd, 0xcf, 0x5e, 0xe0, 0x8d, 0xfd, 0x00,
	0x5f, 0xd3, 0xb8, 0x3f, 0x0c, 0x98, 0xf3, 0x77, 0x3f, 0x0e, 0x03, 0x35, 0xc9, 0x94, 0xd4, 0x93,
	0x4c, 0x89, 0xc2, 0x84, 0xe9, 0x29, 0xd8, 0xd8, 0x24, 0x4c, 0x63, 0xa1, 0x9b, 0xab, 0xb0, 0x50,
	0xf8, 0x24, 0xd7, 0x6d, 0xb3, 0xb1, 0x79, 0x92, 0x2b, 0x7c, 0x16, 0xeb, 0x86, 0xd8, 0xd8, 0x3c,
	0x8b, 0x15, 0xce, 0xa4, 0x2e, 0xd1, 0xc6, 0x66, 0xa6, 0x37, 0x25, 0x2f, 0x9c, 0x7e, 0x89, 0xf3,
	0x42, 0xe1, 0x8b, 0x53, 0xc7, 0x2a, 0xf1, 0xc5, 0xa9, 0x1b, 0x42, 0x57, 0xad, 0x02, 0x7a, 0x0e,
	0x30, 0x21, 0x9c, 0xc5, 0xe7, 0x24, 0xa2, 0xa9, 0xf6, 0xd3, 0xc5, 0x76, 0x15, 0xf1, 0x52, 0xf4,
	0x06, 0xe6, 0xd4, 0x97, 0xa8, 0xf6, 0xe3, 0x59, 0xbb, 0x5a, 0x5d, 0x0e, 0x2e, 0x59, 0xee, 0x39,
	0xd8, 0xcd, 0xbe, 0x20, 0x04, 0xdd, 0x84, 0x37, 0x45, 0xea, 0xef, 0x7f, 0xd2, 0x99, 0xb7, 0xa6,
	0xeb, 0xdc, 0x2b, 0xdd, 0x2f, 0x03, 0xfa, 0xd5, 0xc4, 0xee, 0x2a, 0xe4, 0x2d, 0x3c, 0xa1, 0x22,
	0xa2, 0x2c, 0x22, 0x45, 0xce, 0x33, 0x12, 0xb3, 0xa8, 0x60, 0x6a, 0x11, 0x95, 0x05, 0x0b, 0x2f,
	0x51, 0xe1, 0xb1, 0x61, 0x75, 0x72, 0xa8, 0x0e, 0xd0, 0x32, 0x58, 0x54, 0xf0, 0x48, 0x57, 0x50,
	0x8e, 0xa1, 0x4f, 0x05, 0x1f, 0xa8, 0x22, 0x1a, 0x97, 0xdd, 0x7b, 0xb9, 0xfc, 0x69, 0x80, 0x55,
	0xaf, 0x35, 0x7a, 0x05, 0x8f, 0xe2, 0x24, 0x29, 0xf2, 0x38, 0x99, 0x45, 0x79, 0x9c, 0xd2, 0x42,
	0x68, 0xaf, 0x0f, 0xf1, 0x62, 0x1d, 0xc6, 0x3a, 0x8a, 0x5c, 0xb0, 0xa6, 0xb1, 0xa4, 0xb2, 0x48,
	0x89, 0x36, 0x69, 0xe0, 0x06, 0xa3, 0x55, 0xb0, 0xa7, 0x9c, 0x4d, 0xca, 0xc3, 0x8e, 0x3e, 0xbc,
	0x0c, 0xa0, 0x15, 0xb0, 0x25, 0x3d, 0x27, 0xd1, 0x05, 0x67, 0xa4, 0xda, 0x18, 0x4b, 0x05, 0xbe,
	0x70, 0x46, 0xdc, 0x55, 0xe8, 0x95, 0x8f, 0xe5, 0xa6, 0xf1, 0xb8, 0xbf, 0x0d, 0x40, 0xed, 0xd7,
	0xf0, 0x1f, 0xf7, 0xf6, 0x3b, 0x2c, 0x5c, 0x7d, 0x6e, 0x77, 0x39, 0xbd, 0x9a, 0xd8, 0xbc, 0x25,
	0xf1, 0xbd, 0x56, 0x6f, 0xeb, 0x03, 0x74, 0x46, 0x84, 0xa3, 0x1d, 0x80, 0x11, 0x91, 0x15, 0x0d,
	0x3d, 0xbe, 0x2e, 0xd2, 0xff, 0x6c, 0x77, 0xa9, 0x75, 0xd3, 0xfa, 0x83, 0xe3, 0x9e, 0xfe, 0xcd,
	0x6f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x84, 0x22, 0x5b, 0xf3, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeoClient is the client API for Geo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoClient interface {
	GetGeoInfo(ctx context.Context, in *GeoInfoRequest, opts ...grpc.CallOption) (*GeoInfoReply, error)
}

type geoClient struct {
	cc *grpc.ClientConn
}

func NewGeoClient(cc *grpc.ClientConn) GeoClient {
	return &geoClient{cc}
}

func (c *geoClient) GetGeoInfo(ctx context.Context, in *GeoInfoRequest, opts ...grpc.CallOption) (*GeoInfoReply, error) {
	out := new(GeoInfoReply)
	err := c.cc.Invoke(ctx, "/geo.Geo/GetGeoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServer is the server API for Geo service.
type GeoServer interface {
	GetGeoInfo(context.Context, *GeoInfoRequest) (*GeoInfoReply, error)
}

func RegisterGeoServer(s *grpc.Server, srv GeoServer) {
	s.RegisterService(&_Geo_serviceDesc, srv)
}

func _Geo_GetGeoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).GetGeoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/GetGeoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).GetGeoInfo(ctx, req.(*GeoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geo.Geo",
	HandlerType: (*GeoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeoInfo",
			Handler:    _Geo_GetGeoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo.proto",
}
